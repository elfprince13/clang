#include <stdio.h>

/* Minimal declarations for CUDA support.  Testing purposes only. */

#include <stddef.h>

#define __constant__ __attribute__((constant))
#define __device__ __attribute__((device))
#define __global__ __attribute__((global))
#define __host__ __attribute__((host))
#define __shared__ __attribute__((shared))
#define __launch_bounds__(...) __attribute__((launch_bounds(__VA_ARGS__)))
#define nullptr 0

struct dim3 {
  unsigned x, y, z;
  __host__ __device__ dim3(unsigned x, unsigned y = 1, unsigned z = 1) : x(x), y(y), z(z) {}
};

typedef struct cudaStream * cudaStream_t;

int cudaConfigureCall(dim3 gridSize, dim3 blockSize, size_t sharedSize = 0,
                      cudaStream_t stream = 0);

///////////////////////

__global__ void kernelTest(float * data, int start, int step, int end){
	
}

int main(int argc, char **argv){
	kernelTest<<<128,1024>>>(nullptr, 0, 1, 0);
	if((argc % 4) == 0){
		@Loop2dAccumulate(test_loop)[@ I][= 0][=argc][{argc--;}]{
			int itrVar; @I[=itrVar]; // This stupid idiom is to avoid the need for the type-awareness skeletons would need if used in expression position
			argv[itrVar]++;
		}
	} else {
		printf("args not a multiple of 4: %d\n",argc);	
	}
}
